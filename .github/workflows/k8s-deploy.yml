name: k8s-deploy

on:
  push:
    branches:
      - main
      - release

jobs:
  # This checks if the environment is ready for deployment.
  # When initially creating the repository, the secrets will not be ready yet.
  # Once the environment variables are there you can delete this entire job.
  check-environment:
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.check.outputs.ready }}
    steps:
      - id: check
        run: |
          if [ -z "${{ secrets.aks_container_registry_host }}" ]; then
            echo "ready=false" >> $GITHUB_OUTPUT
          else
            echo "ready=true" >> $GITHUB_OUTPUT
          fi

  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/release' && 'production' || 'development' }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.aks_container_registry_host }}
          username: ${{ secrets.aks_container_registry_username }}
          password: ${{ secrets.aks_container_registry_password }}

      # ðŸ”§ Build & push backend (Node.js)
      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: githubconnector.azurecr.io/${{ github.repository }}-backend:${{ github.sha }}

      # ðŸ”§ Build & push frontend (Angular)
      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: githubconnector.azurecr.io/${{ github.repository }}-frontend:${{ github.sha }}

      - name: Deploy to AKS
        env:
          KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG }}
          IMAGE_TAG: ${{ github.sha }}
          DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
          PROJECT_NAME: ${{ github.repository }}
        run: |
          echo "$KUBECONFIG_CONTENT" > kubeconfig
          for file in k8s/*.yml; do
            echo "Applying $file with IMAGE_TAG=$IMAGE_TAG"
            envsubst < "$file" | kubectl --kubeconfig ./kubeconfig -n ${{ vars.AKS_NAMESPACE_NAME }} apply -f -
          done
